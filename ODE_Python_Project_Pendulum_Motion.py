
################## Program Otto Cycle #####################

import numpy as np #Importing numpy module.
from scipy.integrate import odeint # from the scipy.integrate module importing odient function to find the solution for ode.
import math #Importing math module for mathematical calculations.
import matplotlib.pyplot as plt #Importing matplotlib.pyplot module as plt.


def ode_generator(initial_conditions,t,b,g,l,m):#Creating a function to generate the ode.
	theta1 = initial_conditions[0] #Assigning the 1st condition to the theta1 variable(i.e,angular_displacement).
	theta2 =initial_conditions[1] #Assigning the 2nd condition to the theta2 variable(i.e,angular_velocity).
	dtheta1_dt = theta2 #considering theta2 as derivative of theta1 w.r.to t.
	dtheta2_dt = (-b/m)*theta2 -(g/l)*math.sin(theta1)#Required form of ode.
	dtheta_dt = [dtheta1_dt,dtheta2_dt]
	return dtheta_dt #Returning the generated ode to the main function.


l = 1  #Length of the thread (in m).
g = 9.81 #Acceleration due to gravity (in m/s^2).
b = 0.05 #Dampping Coefficient.
m = 1 #Mass of ball (in kg).
d = 0.25#Diameter of the bod(in m).


#Initial conditions
angular_displacement = math.radians(0)#Assigning initial angular displacement as 0 (in rad).
angular_velocity = 3 #Assigning initial angular velocity as 3(in rad/sec).
initial_conditions = []#Declaring an empty list for accomadation of initial conditions.

#Appending given conditions to the initial_conditions list.
initial_conditions.append(angular_displacement)
initial_conditions.append(angular_velocity)

#Time points
t = np.linspace(0,20,300)

#Solving ordinary differential equation generated by ode_generator function

thetas = odeint(ode_generator,initial_conditions,t,args = (b,g,l,m))#Finding the solution for the ode using odeint function of the scipy.integrate module.


theta_set1=[]#Declaring the list to store the first set of possible solutions.

#Forloop to separate the two possible set of solution generated.
for theta in thetas:
	       theta_set1.append(theta[0])#Appends the first value of theta in the each array to the theta_set1 array.


#Position where the pendulum is connected to the support.
x0,y0 = l,l+0.5

#Initializing the image number.
imgnum = 1

#Forloop to create plots for each position of the pendulum.
for i in range(0,len(theta_set1)):
	x1 = x0 +(l*math.sin(theta_set1[i]))#Calculates the position of the bob along x-axis for corresponding angle.
	y1 = y0 -(l*math.cos(theta_set1[i]))#Calculates the position of the bob along y-axis for corresponding angle.

	plt.figure() #Function which creates new figure.
	imgname = 'Img%05d.png' %imgnum #Naming format for the plot to be generated.
	imgnum = imgnum + 1 #Incrementing the image number. 

	plt.plot([x0,x1],[y0,y1],color = 'k')#Plotting the length of the thread for different angles.
	plt.plot([0,10],[y0,y0],linewidth=5,color = 'k')#Plotting the base support for the pendulum.
	plt.plot(x1,y1,marker='o',markersize = 40,markeredgecolor = 'k',markerfacecolor = 'r')#plotting the bob using marker attribute of the plot function.
	plt.xlim(0,2)#Limitting the x-axis length to 2m.
	plt.ylim(0,1.52)#Limitting the y-axis length to 1.52m.
	plt.savefig(imgname) #Saving plot as given fileformat.



####################################  END  ###########################################
